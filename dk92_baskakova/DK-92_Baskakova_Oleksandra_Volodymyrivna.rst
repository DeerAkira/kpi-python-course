==============================
Баскакова Олександра Володимирівна
==============================


#. Гілки в Git: для чого використовуються, який принцип роботи з гілками. Наведіть команди для створення нової гілки та переключення
   між гілками.
Викорисовуэться для:
 - якщо необхідно зробити зміни вже у існуючому проекті, але доступу до викладення змін немає - можна створити "форк" проекту
 - якщо необхідно протестувати три різні версії одного проекту, аби обрати більше еффективний.
Створення: 
 >>> $ git branch <назва_гілки> //дана команда лише СТВОРЮЄ ГІЛКУ - вона НЕ ПЕРЕКЛЮЧАЄ на цю гілку
 
Переключення: 
 >>> $ git checkout <назва_існуючої_гілки> 
#. Що таке об'єднання гілок та для чого використовується? Конфлікти при об'єднанні.
   Наведіть приклад конфлікту (синтаксис) та команди для внесення змін до репозиторію після вирішення конфлікту.

#. Строкові типи Python. У чому відмінність між Unicode-строкою та байтовою строкою? Наведіть приклад коду, що представляє строку
   ``'вічність'`` у вигляді байтової строки з кодуванням UTF-8 та KOI8-U
На мові Python пыдтримються три строкових типа: 
 - str – призначені для представлення тексту у форматі Unicode та інших систем кодування - wей формат містить символи ASCII і символи в інших кодуваннях;
 - bytes – призначені для представлення двійкових даних;
 - bytearray – призначені для представлення подвійних даних з урахуванням змін у типі байтів.
 Передбачається, що строка - це послідовність символів: кодові точки Юнікоду - це абстрактна концепція і її неможливо зберігати безпосередньо на диску.
 Байтова строка  - це послідновність байтів - байти можнна зберігати безспосередньо на диску.
>>> print(``'вічність'``.encode('utf-8'))
>>> print(``'вічність'``.encode('koi8-u'))

#. Якому емодзі відповідає байтова строка ``b'\xff\xfe=\xd8\r\xdc'`` (UTF-16)? Що значить даний запис байтової строки?
   Наведіть приклад коду, що перекодує дану строку в UTF-8 та вкажіть результат у вигляді коментаря

#. Створіть функцію, яка приймає в якості першого аргументу бажаний опір паралельно з'єднаних резисторів *R* [Ом],
   а в якості подальших аргументів – величини резисторів, що є в наявності [Ом].
   Функція повертає кортеж (tuple), першим елементом якого є словник типу ``{номінал: кількість}``, а другим
   елементом – абсолютне відхилення результуючого опору від бажаного [Ом].
  
#. Що таке she-bang та для чого використовується? Який she-bang буде максимально коректним для Python 3?
   Чи використовується she-bang в скриптах? Якщо так, чому? Якщо ні, коли?
Шибенг - це послідовність із двох символів: «решітки» та знака оклику (#!), яка ставиться на початку файлу (текстового), написаного на скриптовій мові. 
 У системах Unix сценарії Python можна зробити безпосередньо виконуваними, як і сценарії оболонки, шляхом додавання рядка шибенгу на почтаку коду: 
>>> /usr/bin/env python3.5

Коли даний скрипт виконується як програма, то кінець рядка після шибенгу розгялдається завантажувачем як ім'я програмим, що інтерпритує код. Завантажувач запускає дану программу і передає їй ім'я файлу скрипту з шебенгом як параметр.
У системах Windows не існує поняття «режим виконання». Програма встановлення Python автоматично пов’язує файли .py з python.exe, так що подвійне клацання файлу Python запускає його як сценарій.  

Скрипту можна надати режим виконання або дозвіл за допомогою команди chmod:
>>> $ chmod +x myscript.py
  
#. Які цикли Python вам відомі? Який цикл буде виконуватися швидше та чому? 
   Наведіть приклад коду для виводу списка за допомогою кожного з типів циклу.
- цикл while - один із самих універсальних циклів в Python - виконує тіло циклу до тих пір, доки умова циклу істинна, через що досить повільний. тому досить повільний:
 >>> num = [1, 2, 3, 4, 5]
 >>> while i < len(lst):
 >>>    print(lst[i])
 >>>    i += 1
- цикл for - трохи складніший і менш універсальний - проходить по будь-яким ітерованим об'єктам (строка або список), і під час кожного проходу виконується тіло циклу - таким чином виконується швидше:
>>> num = [1, 2, 3, 4, 5]
>>> for i in range(len(num)):
>>> print(num[i])
 
#. Які цикли Python вам відомі? Яким чином можна реалізувати "якщо не було виконано жодного разу" з циклами?
